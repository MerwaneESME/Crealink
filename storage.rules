rules_version = '2';

// Craft rules based on data in your Firestore database
// allow write: if firestore.get(
//    /databases/(default)/documents/users/$(request.auth.uid)).data.isAdmin;
service firebase.storage {
  match /b/{bucket}/o {
    // Fonction pour vérifier si l'utilisateur est authentifié
    function isAuthenticated() {
      return request.auth != null;
    }

    // Fonction de débogage détaillée
    function debug() {
      return {
        auth: request.auth,
        resource: request.resource,
        path: request.path,
        method: request.method,
        time: request.time
      };
    }

    // Fonction pour vérifier si l'utilisateur est le propriétaire
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Fonction pour vérifier les métadonnées
    function hasValidMetadata() {
      return request.resource.contentType.matches('image/.*|video/.*|audio/.*') &&
             request.resource.size < 10 * 1024 * 1024;
    }

    // Règles pour les projets
    match /projects/{userId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) && hasValidMetadata();
    }

    // Règles pour les photos de profil
    match /profile-photos/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) && hasValidMetadata();
    }

    // Règles par défaut pour tous les autres fichiers
    match /{allPaths=**} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && hasValidMetadata();
    }
  }
}
