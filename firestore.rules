rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Fonction pour vérifier le rôle de l'utilisateur
    function getUserRole(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc != null ? userDoc.data.role : null;
    }
    
    // Collection users
    match /users/{userId} {
      // Permettre la lecture du profil de l'utilisateur connecté et des profils publics
      allow read: if request.auth != null;
      
      // Permettre la création et la mise à jour uniquement de son propre profil
      allow create, update: if request.auth != null && 
                           request.auth.uid == userId;
      
      // Permettre la suppression uniquement de son propre profil
      allow delete: if request.auth != null && 
                    request.auth.uid == userId;
    }
    
    // Collection portfolio pour les créateurs
    match /portfolio/{itemId} {
      // Tout le monde peut voir les éléments du portfolio
      allow read: if request.auth != null;
      
      // Seul le créateur peut ajouter du contenu à son portfolio
      allow create: if request.auth != null && 
                    request.resource.data.creatorId == request.auth.uid;
      
      // Seul le créateur peut modifier ou supprimer son contenu
      allow update, delete: if request.auth != null && 
                            resource.data.creatorId == request.auth.uid;
    }
    
    // Collection job_proposals pour les notifications
    match /job_proposals/{proposalId} {
      // Permettre la lecture aux utilisateurs concernés
      allow read: if request.auth != null && 
                  (resource.data.expertId == request.auth.uid || 
                   resource.data.creatorId == request.auth.uid);
      
      // Permettre la création pour les créateurs
      allow create: if request.auth != null && 
                    getUserRole(request.auth.uid) == 'creator' &&
                    request.resource.data.creatorId == request.auth.uid;
      
      // Permettre la mise à jour pour l'expert ou le créateur concerné
      allow update: if request.auth != null && 
                    (resource.data.expertId == request.auth.uid || 
                     resource.data.creatorId == request.auth.uid);
      
      // Permettre la suppression uniquement au créateur
      allow delete: if request.auth != null && 
                    resource.data.creatorId == request.auth.uid;
    }
    
    // Collection projects
    match /projects/{projectId} {
      // Permettre la lecture des projets pour les utilisateurs authentifiés
      allow read: if request.auth != null;
      
      // Permettre la création de projets pour les experts
      allow create: if request.auth != null && 
                    getUserRole(request.auth.uid) == 'expert' && 
                    request.resource.data.expertId == request.auth.uid;
      
      // Permettre la mise à jour et la suppression uniquement par le propriétaire
      allow update, delete: if request.auth != null && 
                           resource.data.expertId == request.auth.uid;
    }
    
    // Collection creatorContent pour le portfolio des créateurs
    match /creatorContent/{contentId} {
      // Permettre la lecture du contenu pour tous les utilisateurs authentifiés
      allow read: if request.auth != null;
      
      // Permettre la création et la mise à jour uniquement par le créateur propriétaire
      allow create, update: if request.auth != null && 
                            request.resource.data.creatorId == request.auth.uid;
      
      // Permettre la suppression uniquement par le créateur propriétaire
      allow delete: if request.auth != null && 
                    resource.data.creatorId == request.auth.uid;
    }
    
    // Collection jobs
    match /jobs/{jobId} {
      // Permettre la lecture des offres pour tous les utilisateurs authentifiés
      allow read: if request.auth != null;
      
      // Permettre la création d'offres pour les créateurs et les influenceurs
      allow create: if request.auth != null && 
                    (getUserRole(request.auth.uid) == 'creator' || 
                     getUserRole(request.auth.uid) == 'influencer');
      
      // Permettre la mise à jour et la suppression uniquement par le créateur de l'offre
      allow update, delete: if request.auth != null && 
                            resource.data.creatorId == request.auth.uid;
    }
    
    // Reste des règles inchangées
    // ...
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    // Règles pour les photos de profil
    match /profile-photos/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Dossier portfolio pour les fichiers du portfolio des créateurs
    match /portfolio/{userId}/{fileName} {
      allow read: if true;
      allow write: if request.auth != null && 
                   request.auth.uid == userId &&
                   request.resource.size < 20 * 1024 * 1024 && // 20MB max
                   (
                     request.resource.contentType.matches('image/.*') ||
                     request.resource.contentType.matches('video/.*') ||
                     request.resource.contentType.matches('audio/.*')
                   );
    }
    
    // Règles pour les projets
    match /projects/{userId}/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
                   request.auth.uid == userId &&
                   request.resource.size < 10 * 1024 * 1024 && // 10MB max
                   (
                     request.resource.contentType.matches('image/.*') ||
                     request.resource.contentType.matches('video/.*') ||
                     request.resource.contentType.matches('audio/.*')
                   );
    }
    
    // Règles pour les autres fichiers
    match /{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
  }
}